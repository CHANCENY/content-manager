<form method="post" class="form">
    <input type="hidden" name="type" value="{{ field.type }}">
    <div class="field-wrapper">
        <!-- Field Label and Name -->
        <div class="form-group">
            <label for="field-name">Label</label>
            <input type="text" name="title" id="field-name" class="form-control" placeholder="Enter field label">
        </div>

        <!-- Field Settings -->
        <fieldset class="form-control">
            <legend>Field Settings</legend>

            <div class="form-group">
                <label for="class">Css Classes (optional)</label>
                <input type="text" name="class" id="class" class="form-control">
                <small>Separate classes with a space</small>
            </div>
            <div class="form-group">
                <label for="default-value">Html ID (optional)</label>
                <input type="text" name="id" id="default-value" class="form-control">
            </div>
        </fieldset>

        <fieldset class="option-wrapper">
            <legend>{{ field.title }} Inner Fields</legend>
            <div class="inner-collection">
                <div class="form-group">
                    <label>Type</label>
                    <select name="inner_type[]" class="form-control inner-field-type">
                        <option value="">Select type</option>
                        {% for info in fields %}
                            <option value="{{ info.type }}">{{ info.type }}</option>
                        {% endfor %}
                    </select>
                    <details></details>
                    <a href="#" class="remove d-none">Remove field</a>
                </div>
            </div>
            <div class="form-group">
                <button type="button" class="btn btn-primary w-auto add-inner">Add field</button>
            </div>
        </fieldset>

        <div class="form-group">
            <button type="submit" class="btn btn-primary w-25">Save</button>
        </div>
    </div>
</form>
<noscript id="inner-field-supported">{{ html|json_encode|raw }}</noscript>
<noscript id="inner-count">0</noscript>
<script>
    (function($) {
        $(document).ready(function(){
            let innerFieldSupported = $('#inner-field-supported').text();
            innerFieldSupported = JSON.parse(innerFieldSupported);

            setInterval(()=>{
                $(".inner-field-type").off('change').on('change', function(e){
                    e.preventDefault();
                    const selected = $(this).val();
                    const html = innerFieldSupported[selected] || '';

                    if (html) {
                        const html_obj = $(html);

                        // Get the <form> element inside the html_obj
                        const form = html_obj.is('form') ? html_obj : html_obj.find('form');

                        if (form.length) {
                            // Remove submit buttons inside the form
                            form.find('input[type="submit"]').remove();

                            // Update all name attributes to use array syntax
                            form.find('[name]').each(function() {
                                let originalName = $(this).attr('name');
                                if (originalName && !originalName.endsWith('[]')) {
                                    $(this).attr('name', 'inner_'+originalName + '_'+ $("#inner-count").text());
                                }else {
                                    originalName = originalName.replace('[]', '').trim();
                                    console.log(originalName);
                                    $(this).attr('name', 'inner_'+originalName + '_'+ $("#inner-count").text()+ '[]');
                                }
                            });

                            // Get only the inner HTML of the form
                            const formInnerHtml = form.html();

                            // Find and populate <details> with form inner HTML
                            const details = $(this).parent().find('details');
                            if (details.length) {
                                details.html(formInnerHtml);
                                details.show();
                            }
                        }
                    }
                });
            }, 1000);

            let optionsWrapper = $('.option-wrapper');
            if (optionsWrapper) {
                optionsWrapper.find('.add-inner').off('click').on('click', function(e){
                    const collections = optionsWrapper.find('.inner-collection');
                    const clone = collections.find('.form-group').first().clone();
                    const count = parseInt($('#inner-count').text())  + 1;
                    clone.find('input').val('');
                    collections.append(clone);
                    $('#inner-count').text(count.toString());
                    clone.find('a').removeClass('d-none')
                    clone.find('a').on('click', function(e){
                        e.preventDefault();
                        $(this).parent().remove();
                        $('#inner-count').text((count - 1).toString());
                    })

                })
            }


        });
    })(jQuery);

</script>